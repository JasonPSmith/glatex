#!/usr/bin/env python
import subprocess
import sys
import shutil
from glatex import *


gdoc_pat = 'https://docs.google.com/document/export?format=txt&id=%s'
sed_command = r'1 s/\xEF\xBB\xBF//'


if __name__ == "__main__":
    if '--help' in sys.argv[1:]:
        print( """Usage:
        NAME document_id /path/to/output.tex
            Where document_id is the unique google doc id. The document must have link sharing without authentication set up!
        NAME document_alias
            Set up a document alias in ~/.config/glatex/documents. Format (one per line):
                alias;;document_id;;/path/to/documents/home/directory
        NAME document_alias /path/to/output.tex
            Uses the document alias as above, but puts the output into the specified file
        NAME --append document_id_or_alias /path/to/output.tex
            Creates a new alias with the specified document_id (potentially from an existing alias) and the specified output path
        NAME --no-refresh [...]
            Does not check out latest version from google
        NAME --no-open [...]
            Does not open for viewing after completion. For example if it is already open for viewing.
        """.replace("NAME", os.path.split(__file__)[1]))
        sys.exit(1)

    do_refresh = True
    do_open = True
    append = False
    profile = 'default'
    args = []
    for arg in sys.argv[1:]:
        if arg == '--no-refresh':
            do_refresh = False
        elif arg == '--no-open':
            do_open = False
        elif arg == '--append':
            append = True
        elif arg.startswith('--profile='):
            profile = arg[10:]
        else:
            args.append(arg)
    assert len(args) > 0, "No input specified!"
    config = get_config(profile)
    tl1 = filename_translator(config["compiler_translator"])
    tl2 = filename_translator(config["viewer_translator"])
    out_name, doc_id, out_dir = treat_args(args, append=append)
    assert os.path.isdir(out_dir), ("%s not a directory!" % out_dir)
    write_latest(out_name, doc_id, out_dir)
    os.chdir('/tmp')
    pdf_name = os.path.splitext(out_name)[0] + config['doc_extension']
    if do_refresh:
        subprocess.check_output(["wget", "-O", out_name, gdoc_pat % doc_id])
        subprocess.check_output(["sed", "-i", "-e", sed_command, out_name])
        compile = [config["compiler"]["exe"]] + config["compiler"].get("args", []) + [tl1(out_name)]
        subprocess.check_output(compile)
        shutil.copy(pdf_name, out_dir)
    os.chdir(out_dir)
    if do_open:
        view = [config["viewer"]["exe"]] + config["viewer"].get("args", []) + [tl2(pdf_name)]
        subprocess.check_output(view)
